openapi: 3.0.1
info:
  title: STD21000 API
  description: 'Global description of my API'
  version: 1.0.0
servers:
 - url: https://STD21000.com
tags: 
 - name: Students
   
 - name: Courses
paths:
 /Students:
    get:
      tags:
        - Students
      operationId: getStudents
      summary: Get all students
      description: Get all students with details
      responses:
        200: 
          description: List of students
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Student'
        400:
          description: Bad request
    post: 
      tags:
        - Students
      operationId: createStudent
      summary : Create new student
      description: Create new student
      requestBody:
        description: Student to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStudent'
        required: true
      responses:
        200:
          description: List of students
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        400:
          description: Bad request  
    put:
      tags:
        - Students 
      operationId: putStudent
      summary: Update an existing student
      description: Change all information of student
      requestBody:
        description: Student to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Student'
        required: true
      responses:
        200:
          description: Successful Updating 
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Student'
                
        400:
          description: Bad request 
    patch:
      tags:
        - Students
      operationId: patchStudent
      summary: Update an existing student
      description: Change some information of student
      requestBody:
        description: Student to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Student'
        required: true
      responses:
        200:
          description: Successful Update
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        400:
          description: Bad request
 /Students/{id}:
    get:
      tags:
        - Students
      operationId: getStudentsById
      summary: Find student by ID
      description: Return a single student
      parameters:
      - name: id
        in: path
        description: Return the ID of Student
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Student'
      responses:
        200: 
          description: List of students
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Student'
        400:
          description: Bad request
    delete:
      tags: 
        - Students
      operationId: deleteStudentsById
      summary: Delete student by ID
      description: Delete a student
      parameters:
      - name: id
        required: true
        in: path
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Student'
      responses:
        200:
          description: Successful Delete
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        400:
          description: Bad request
 /Courses:
    get:
      tags:
        - Courses
      operationId: getCourses
      summary: Get all Courses
      description: Get all courses with details
      responses:
        200: 
          description: List of courses
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Courses'
        400:
          description: Bad request
    post: 
      tags:
        - Courses
      operationId: createCourses
      summary : Create new Courses
      description: Create new Courses
      requestBody:
        description: Courses to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCourses'
        required: true
      responses:
        200:
          description: List of courses
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Courses'
        400:
          description: Bad request 
    put:
      tags:
        - Courses
      operationId: putCourses
      summary: Update an existing Courses
      description: Change all information of courses
      requestBody:
        description: Courses to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Courses'
        required: true
      responses:
        200:
          description: Successful Updating 
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Courses'
        400:
          description: Bad request
    patch:
      tags:
        - Courses
      operationId: patchCourses
      summary: Update an existing courses
      description: Change some information of courses
      requestBody:
        description: Courses to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Courses'
        required: true
      responses:
        200:
          description: Successful Update
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Courses'
        400:
          description: Bad request
 /Courses/{id}:
    get:
      tags:
        - Courses
      operationId: getCoursesById
      summary: Find courses by ID
      description: Return a single courses
      parameters:
      - name: id
        in: path
        description: Return the ID of courses
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Courses'
      responses:
        200: 
          description: List of Courses
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Courses'
        400:
          description: Bad request
    delete:
      tags: 
        - Courses
      operationId: deleteCoursesById
      summary: Delete course by ID
      description: Delete a course
      parameters:
      - name: id
        required: true
        in: path
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Delete_Courses'
      responses:
        200:
          description: Successful Delete
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Delete_Courses'
        400:
          description: Bad request
          
components:
  schemas:
    CreateStudent:
      type: object
      properties:
        name:
          type: string
          example: "Rakoto"
        birth_date:
          type: string
          format: date
          example: "2022-01-01"
        adress:
          type: string
          example: "Ivato"
        phonenumber:
          type: array
          items:
            $ref: '#/components/schemas/phonenumber'
    Student:
      allOf:
        - $ref: '#/components/schemas/CreateStudent'
      type: object
      properties:
        id:
          type: integer
          example: 10
    phonenumber: 
      type: object
      properties: 
        number:
            type: string
            example: "032+++++++"
        country_code:
          type: string
          example: "+261"
    CreateCourses:
      type: object
      properties:
       id:
          type: integer
          example: 10
      created_Date:
          type: string
          format: date
          example: "2022-01-01"
      name:
          type: string
          example: "EL1P1"
      teacher:
          type: string
          example: "Ryan"
    Courses:
      allOf:
        - $ref: '#/components/schemas/CreateCourses'
      type: object
      properties: 
        id:
          type: integer
          example: 10
    DeleteCourses:
      type: object
      properties:
        id:
          type: integer
          example: 10
    Delete_Courses:
      allOf:
        - $ref: '#/components/schemas/DeleteCourses'
      type: object
      properties:
        id:
          type: integer
          example: 10
    